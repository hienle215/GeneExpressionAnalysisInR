print(item)
my.list <- list(c(1,2,3), mtcars,12)
for (item in my.list){
print(item)
}
mat <- matrix(1:25, nrow=5)
print(mat)
mat <- matrix(1:25, nrow=5)
print(mat)
for (num in mat){
print(num)
mat <- matrix(1:25, nrow=5)
print(mat)
for (num in mat){
print(num)
}
mat <- matrix(1:25, nrow=5)
for (num in mat){
print(num)
}
mat <- matrix(1:25, nrow=5)
for (row in 1:nrow(mat)){
for(col in 1:ncol(mat)){
print(paste("The element at row:", row,"and col:",col,"is",mat[row,col]))
}
}
mat <- matrix(1:25, nrow=5)
for (row in 1:nrow(mat)){
for(col in 1:ncol(mat)){
print(paste("The element at row:", row,"and col:",col,"is",mat[row,col]))
}
}
mat
seq(0, 10, by = 2)
0:10
seq(0, 100, by = 10)
seq(0, 24, by = 2)
help("seq")
v <- c(1,4,7,2,13,3,11)
v
sort(v)
sort(v, decreasing = T)
cv <- c("b","d","a")
sort(cv)
cv <- c("b","d","a", "C")
sort(cv)
v <- 1:10
v
rev(v)
str(v)
str(mtcars)
summary(mtcars)
v <- 1:10
v2 <- 35:40
v
v2
append(v,v2)
# Checking data type
v <- c(1,2,3)
is.vector)v
is.vector(v)
#as.
v
as.list(v)
as.matrix(v)
# Apply function
sample(x = 1:10, 1)
print(sample(x = 1:10, 1))
print(sample(x = 1:100, 1))
v <- c(1,2,3,4,5)
addrand <- function(x){
ran <- sample(1:100, 1)
return(x+ran)
}
print(addrand(10))
lapply(v, addrand)
print(result)
v <- c(1,2,3,4,5)
addrand <- function(x){
ran <- sample(1:100, 1)
return(x+ran)
}
print(addrand(10))
result <- lapply(v, addrand)
print(result)
result <- sapply(v, addrand)
print(result)
v <- 1:5
return(num*2)
result <- sapply(v, times2)
print(result)
v <- 1:5
times2 <- function(num){
return(num*2)
}
print(v)
result <- sapply(v, times2)
print(result)
help(sapply)
result <- sapply(v,function(num){num*2})
print(result)
return(num*2)
add_choice <- function(num, choice){
return(num+choice)
}
print(add_choice(2,10))
sapply(v, add_choice)
abs(2)
abs(-2)
v <- c(-2, -3, 0, 4)
abs(v)
sum(v)
mean(v)
round(v)
round(2.333123421)
round(2.333123421, digits = 2)
round(2.37777,3)
# Regular expression
#grepl function
text <- "Hi there, do you who your are voting for?"
text#grep function
grepl("voting", text)
grepl("dog", text)
#grep function
v <- c("a", "b", "c","d","d")
v
grepl("b",v)
grep("b",v)
grep("d",v)
grepl("hello", "hello world")
grep("a", c("b","a"))
Sys.Date()
today <- Sys.Date()
class(today)
c<- "1990-01-01"
class(c)
my.date <- as.Date(c)
class(my.date)
as.Date("Nov-03-1990")
as.Date(05-21-1991)
my.date <- as.Date("Nov-03-90")
my.date <- as.Date("Nov-03-90", format = "%b-%d-%y")
my.date
c<- "1990-01-01"
class(c)
my.date <- as.Date(c)
class(my.date)
as.Date("Nov-03-1990")
as.Date(05-21-1991)
my.date <- as.Date("Nov-03-90", format = "%b-%d-%y")
my.date
my.date <- as.Date("Nov-03-90",format = "%b-%d-%y")
my.date
my.date <- as.Date("Nov-03-90",format ="%b-%d-%y")
my.date
as.Date("June,01,2002", format="%B,%d,%Y")
as.Date("June,01,2002",format="%B,%d,%Y")
install.packages("dplyr")
installed.packages("nyclights13")
library(dplyr)
installed.packages("nycflights13")
library(nycflights13)
install.packages("nycflights13")
library(nycflights13)
head(flights)
summary(flights)
head(filter(flights,month==11,day==3,carrier=="AA"))
head(flights[flights$month == 1 & flights$day == 3 & flights$carrier == "AA",])
#slice (return to the position)
slice(flights, 1:10)
#arrange
head(arrange(flights,year,month,day,air_time))
head(arrange(flights,year,month,day,arr_time))
head(arrange(flights,year,month,day,desc(arr_time))
head(arrange(flights,year,month,day,desc(arr_time)))
head(arrange(flights,year,month,day,desc(arr_time)))
#Select function from data fames
head(select(flights,carrier))
head(select(flights,carrier, arr_time,month))
#rename function
head(rename(flights,airline_carrier = carrier))
#Distinct
distint(select(flights,carrier))
#Distinct
distinct(select(flights,carrier))
head(mutate(flights, new_col = arr_delay-dep_delay))
head(transmute(flights, new_col = arr_delay*dep_delay))
summarise(flight, avg_air_times=mean(air_time,na.rm = TRUE))
summarise(flights, avg_air_times=mean(air_time,na.rm = TRUE))
summarise(flights, total_time=sum(air_time,na.rm = TRUE))
#Sample_n
sample_n(flights,10)
sample_frac(flights,0.1)
#pipe operator
library(dplyr)
#Nesting
filter(df, mpg >20)
result <- arrange(sample_n(filter(df, mpg >20), size=5),desc(mpg))
print(result)
#Multiple assignments
a <- filter(df,mpg>20)
b <- sample_n(a,size=5)
resutl <- arrange(b, desc(mpg))
print(result)
#Data %<% op1 %<% op2 %<% op3
results <- df %<% filter(mpg>20) %<% sample_n(size=5) %<% arrange(desc(mpg))
#Data %>% op1 %>% op2 %>% op3
results <- df %>% filter(mpg>20) %>% sample_n(size=5) %>% arrange(desc(mpg))
print(result)
library(dplyr)
head(mtcars)
filter(mtcars, mpg>20,cyl>6)
filter(mtcars, mpg>20,cyl==6)
#Reorder the Data Frame by cyl first, then by descending wt.
head(arrange(mtcars,cyl,desc(wt)))
#Select the columns mpg and hp
select(mtcars,mpg,hp)
#Select the distinct values of the gear column.
distinct(mtcars,gear)
head(mutate(mtcars,performance))
#Create a new column called "Performance" which is calculated by hp divided by wt.
performance <- hp/wt
head(mutate(mtcars,performance))
#Create a new column called "Performance" which is calculated by hp divided by wt.
performance <- mtcars$hp/mtcars$wt
head(mutate(mtcars,performance))
#Find the mean mpg value using dplyr.
mean(mtcars$mpg)
#Use pipe operators to get the mean hp value for cars with 6 cylinders.
mtcars %>% filter(cyl==6) %>% summarise(avg_hp = mean(hp))
install.packages("tidyr")
install.packages("data.table")
library(tidyr)
library(data.table)
#gather
comp <- c(1,1,1,2,2,2,3,3,3)
yr <- c(1998, 1999, 2000, 1998, 2000, 1998, 1999, 2000)
q1 <- runif(9, min=0, max=100)
q2 <- runif(9, min=0. max=100)
q3 <- runif(9, min=0, max=100)
q4 <- runif(9, min=0, max=100)
df <- data.frame(comp=comp,year=yr,Qtr1=q1,Qtr2=q2,Qtr3=q3,Qtr4=q4)
q2 <- runif(9, min=0. max=100)
df <- data.frame(comp=comp,year=yr,Qtr1=q1,Qtr2=q2,Qtr3=q3,Qtr4=q4)
df <- data.frame(comp=comp,year=yr,Qtr1=q1,Qtr2=q2,Qtr3=q3,Qtr4=q4)
yr <- c(1998, 1999, 2000, 1998, 2000, 1998, 1999, 2000)
q1 <- runif(9, min=0, max=100)
q2 <- runif(9, min=0. max=100)
q3 <- runif(9, min=0, max=100)
q4 <- runif(9, min=0, max=100)
q2 <- runif(9, min=0, max=100)
df <- data.frame(comp=comp,year=yr,Qtr1=q1,Qtr2=q2,Qtr3=q3,Qtr4=q4)
df <- data.frame(comp=comp,year=yr,Qtr1 = q1,Qtr2 = q2,Qtr3 = q3,Qtr4 = q4)
installed.packages("ggplot2")
installed.packages("ggplot2movies")
library(ggplot2)
installed.packages("ggplot2movies")
library(ggplot2)
library(ggplot2movies)
installed.packages("ggplot2movies")
library(ggplot2movies)
colmanes(movies)
colnames(movies)
head(movies)
#DATA AESTHETICS
pl <- ggplot(movies,aes(x=rating))
#Geometry
print(pl + geom_histogram())
print(pl + geom_histogram(binwidth = 0.1))
print(pl + geom_histogram(binwidth = 0.1, color="red"))
print(pl + geom_histogram(binwidth = 0.1, color="red", fill="Pink"))
print(pl + geom_histogram(binwidth = 0.1, color="red", fill="Pink",alpha=0))
print(pl + geom_histogram(binwidth = 0.1, color="red", fill="Pink",alpha=1))
print(pl + geom_histogram(binwidth = 0.1, color="red", fill="Pink",alpha=0.4))
print(pl3)
pl4 <- (pl2 + xlab("Movie Rating") + ylab("My Count"))
print(pl4)
pl4 <- (pl2 + xlab("Movie Rating") + ylab("My Count"))
print(pl4)
pl4 <- (pl2 + xlab("Movie Rating") + ylab("My Count"))
#adding the labels
pl2 <- pl + geom_histogram(binwidth = 0.1, color="red", fill="Pink",alpha=0.4)
pl4 <- (pl2 + xlab("Movie Rating") + ylab("My Count"))
print(pl4)
print(pl3 + ggtitle("My title"))
pl2 <- pl + geom_histogram(binwidth = 0.1, color="red", fill="Pink",alpha=0.4)
pl3 <- (pl2 + xlab("Movie Rating") + ylab("Count"))
print(pl3 + ggtitle("My title"))
#fill with the range of the color
pl2 <- pl + geom_histogram(binwidth = 0.1, aes(fill=..count=..))
pl2 <- pl + geom_histogram(binwidth = 0.1, aes(fill=..count=..))
pl3 <- (pl2 + xlab("Movie Rating") + ylab("Count"))
print(pl3 + ggtitle("My title"))
#fill with the range of the color
pl2 <- pl + geom_histogram(binwidth = 0.1, aes(fill=..count=..))
pl3 <- (pl2 + xlab("Movie Rating") + ylab("Count"))
print(pl3 + ggtitle("My title"))
#fill with the range of the color
pl2 <- pl + geom_histogram(binwidth = 0.1, aes(fill=..count..))
pl3 <- (pl2 + xlab("Movie Rating") + ylab("Count"))
print(pl3 + ggtitle("My title"))
library(ggplot2)
library(ggplot2movies)
pl <- ggplot(movies,aes(x=year,Y=rating))
source('~/.active-rstudio-document', encoding = 'UTF-8')
print(pl + geom_bin2d())
library(ggplot2)
library(ggplot2movies)
pl <- ggplot(movies,aes(x=year,Y=rating))
print(pl + geom_bin2d())
print(pl + geom_bin2d())
library(ggplot2)
library(ggplot2movies)
pl <- ggplot(movies,aes(x=year,Y=rating))
print(pl + geom_bin2d())
pl <- ggplot(movies,aes(x=year,y=rating))
print(pl + geom_bin2d())
pl2 <- pl + geom_bind2d()
library(ggplot2)
library(ggplot2movies)
pl <- ggplot(movies,aes(x=year,y=rating))
print(pl + geom_bin2d())
pl2 <- pl + geom_bind2d()
pl2 <- pl + geom_bin2d()
print(pl2 + scale_fill_gradient(high="red", low="green"))
pl3 <- pl + geom_bin2d(binwidth=c(3,1))
print(pl3 + scale_fill_gradient(high="red", low="green"))
print(pl3 + scale_fill_gradient(high="red", low="blue"))
pl4 <- pl + geom_hex
pl4 <- pl + geom_hex()
print(pl4 + scale_fill_gradient(high="red", low="blue"))
install.packages("hexbin")
pl4 <- pl + geom_hex()
print(pl4 + scale_fill_gradient(high="red", low="blue"))
pl5 <- pl + geom_density2d()
print(pl5)
library(ggplot2)
ggplot2(mpg, aes(x=displ,y=hwy)) + geom_point()
pl <- ggplot2(mpg, aes(x=displ,y=hwy)) + geom_point()
pl <- ggplot(mpg, aes(x=displ,y=hwy)) + geom_point()
print(pl)
pl2 <- pl + coord_cartesian(xlim=c(1,4),ylim=c(15,30))
print(pl2)
pl3 <- pl + coord_fixef(ratio=1/3)
print(pl3)
pl3 <- pl + coord_fixed(ratio=1/3)
print(pl3)
#facet_grid
print(pl)
print(pl + facet_grid(. ~ cyl))
head(mpg)
#facet function will support to create the different graph of each sample
print(pl + facet_grid(drv ~ .))
print(pl + facet_grid(drv ~ cyl))
#themes
library(ggplot2)
pl <- ggplot(mtcars,aes(x=wt,y=mpg)) + geom_point()
print(pl)
theme_set(theme_minimal())
pl <- ggplot(mtcars,aes(x=wt,y=mpg)) + geom_point()
print(pl
pl <- ggplot(mtcars,aes(x=wt,y=mpg)) + geom_point()
print(pl)
print(pl + theme_dark())
install.packages("ggthemes")
library(ggthmes)
library(ggthemes)
print(pl + theme_economist())
library(ggplot2)
ggplot()library(ggthemes)
library(themes)
library(ggthemes)
head(mpg)
install.packages("plotly")
# get the data
pwd
getwd()
ls
cd C:\\Users\\leh\\Documents\\DataScienceAndML
cd \\Users\\leh\\Documents\\DataScienceAndML
cd \\Users\\leh\\Documents\\DataScienceAndML
cd C\\Users\\leh\\Documents\\DataScienceAndML
cd (C\\Users\\leh\\Documents\\DataScienceAndML)
df <- read.csv("student-mat.csv")
df <- read.csv("student-mat.csv")
df <- read.csv("student-mat.csv")
ls
ls
#GET THE DATA
install.packages("ISLR")
library(ISLR)
strc(Caravan)
str(Caravan)
summary(Caravan$Purchase)
any(is.na(Caravan))
var(Caravan[,1])
var(Caravan[,2])
purchase <- Caravan[,86]
#Identify the datasheet
standardized.Caravan <- scale(Caravan[,-86])
print(var(standardized.Caravan[,1]))
print(var(standardized.Caravan[,2]))
#Train test split in the data
test.index <- 1:1000
test.data <- standardized.Caravan[test.index,]
test.purchase <- purchase[test.index]
#train data
train.data <- standardized.Caravan[-test.index,]
train.purchase <- purchase[-test.index]
#####
# KNN model
library(class)
set.seed(101)
predicted.purchase <- knn(train.data, test.data,train.purchase, k =1)
print(head(predicted.purhcase))
print(head(predicted.purchase))
mischass.error <- mean(test.purchase != predicted.purchase)
print(misclass.error)
misclass.error <- mean(test.purchase != predicted.purchase)
print(misclass.error)
predicted.purchase <- knn(train.data, test.data,train.purchase, k =3)
print(head(predicted.purchase))
misclass.error <- mean(test.purchase != predicted.purchase)
print(misclass.error)
predicted.purchase <- knn(train.data, test.data,train.purchase, k =5)
print(head(predicted.purchase))
misclass.error <- mean(test.purchase != predicted.purchase)
print(misclass.error)
#how to chose the best K value
predicted.purchase <- NULL
error.rate <- NULL
error.rate[i] <- mean(test.purchase != predicted.purchase)
for(i in 1:20){
set.seed(101)
predicted.purchase <- knn(train.data, test.data, train.purchase, k=i)
error.rate[i] <- mean(test.purchase != predicted.purchase)
}
print(error.rate)
### VISUALIZE K ELBOW METHOD
####
library(ggplot2)
k.values <- 1:20
error.df <- data.frame(error.rate, k.vales)
error.df <- data.frame(error.rate, k.values)
k.values <- 1:20
error.df <- data.frame(error.rate, k.values)
print(error.df)
### VISUALIZE K ELBOW METHOD
####
library(ggplot2)
k.values <- 1:20
error.df <- data.frame(error.rate, k.values)
error.rate <- NULL
error.df <- data.frame(error.rate, k.values)
print(error.rate)
error.rate <- NULL
for(i in 1:20){
set.seed(101)
predicted.purchase <- knn(train.data, test.data, train.purchase, k=i)
error.rate[i] <- mean(test.purchase != predicted.purchase)
}
print(error.rate)
k.values <- 1:20
error.df <- data.frame(error.rate, k.values)
print(error.df)
ggplot(error.df,aes(k.values, error.rate)) + geom_point() + geom_line(lty="dotted", color="red")
# We can expand this idea to non-linearly separabel data through the "kernel trick".
library(ISLR)
print(head(iris))
install.packages("e1071")
library(e1071)
help("svm")
model <- svm(Species ~., data = iris)
summary(model)
pred.values <- predict(model, iris[1:4])
table(pred.values, iris[,5])
tunne.results <- tune(svm, train.x = iris[1:4], train.y = iris [,5], kernel = "radial", ranges = list(cost=c(0.1,1,10)), gama=c(0.5,1,2))
summary(tunne.results)
tunne.results <- tune(svm, train.x = iris[1:4], train.y = iris [,5], kernel = "radial", ranges = list(cost=c(0.1,1,10)), gamma=c(0.5,1,2))
summary(tunne.results)
tune.results <- tune(svm, train.x = iris[1:4], train.y = iris [,5], kernel = "radial", ranges = list(cost=c(0.1,1,10)), gamma=c(0.5,1,2))
summary(tune.results)
head(tune.results)
tune.results1 <- tune(svm, train.x = iris[1:4], train.y = iris [,5], kernel = "radial", ranges = list(cost=c(0.1,1,1.5)), gamma=c(0.1, 0.5,0.7))
summary(tune.results1)
#cost = 1.5
#gamma = 0.1
tuned.svm <- svm(Species ~., data= iris, kernel = "radial", cost = 1.5, gamma = 0.1)
summary(tuned.svm)
install.packages("tm")
instal.packages("twitteR")
install.packages("twitteR")
install.packages("wordcloud")
install.packages("twitteR")
install.packages("wordcloud")
install.packages("RColorBrewer")
install.packages("e1017")
install.packages("class")
library(twitteR)
library(tm)
library(wordcloud)
library(RColorBrewer)
setwd("~/GeneExpressionAnalysisInR")
library(edgeR)
install.packages(edgeR)
install.packages(edgeR)
source("http://bioconductor.org/biocLite.R")
biocLite("edgeR")
source("http://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
biocLite("baySeq")
source("http://bioconductor.org/biocLite.R")
